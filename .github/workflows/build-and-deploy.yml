name: Publish and Deploy Eccountant

on:
  push:
    branches:
      - main
    paths:
      - web/**
      - backend/**
      - common/**
      - docker-compose.prod.yml

env:
  FRONTEND_IMAGE_NAME: eccountant-web
  BACKEND_IMAGE_NAME: eccountant-backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set environment variables for paths
        id: vars
        run: |
          echo "WEB_CHANGED=false" >> $GITHUB_ENV
          echo "BACKEND_CHANGED=false" >> $GITHUB_ENV
          if git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -q '^web/'; then
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
          fi
          if git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -q '^backend/'; then
            echo "BACKEND_CHANGED=true" >> $GITHUB_ENV
          fi
          if git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -q '^common/'; then
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "BACKEND_CHANGED=true" >> $GITHUB_ENV
          fi

      # Frontend build and push
      - name: Ensure environment.ts exists
        if: env.WEB_CHANGED == 'true'
        working-directory: web
        run: |
          if [ ! -f src/environments/environment.ts ]; then
            echo "export const environment = { production: false };" > src/environments/environment.ts
            echo "export default environment;" >> src/environments/environment.ts
          fi

      - name: Create environment.prod.ts
        if: env.WEB_CHANGED == 'true'
        working-directory: web
        run: |
          echo "export const environment = {" > src/environments/environment.prod.ts
          echo "  production: true," >> src/environments/environment.prod.ts
          echo "  auth0_audience: '${{ secrets.AUTH0_AUDIENCE }}'," >> src/environments/environment.prod.ts
          echo "  auth0_domain: '${{ secrets.AUTH0_DOMAIN }}'," >> src/environments/environment.prod.ts
          echo "  auth0_client_id: '${{ secrets.AUTH0_CLIENT_ID }}'," >> src/environments/environment.prod.ts
          echo "  api_url: '${{ secrets.PROD_API_URL }}'," >> src/environments/environment.prod.ts
          # Add any other environment variables here
          echo "};" >> src/environments/environment.prod.ts
          echo "export default environment;" >> src/environments/environment.prod.ts

      - name: Build frontend image
        if: env.WEB_CHANGED == 'true'
        run: docker build -t $FRONTEND_IMAGE_NAME -f web/Dockerfile .

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push frontend image to GitHub Container Registry
        if: env.WEB_CHANGED == 'true'
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$FRONTEND_IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $FRONTEND_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      # Backend build and push
      - name: Create .env file
        if: env.BACKEND_CHANGED == 'true'
        working-directory: backend
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "WEBHOOK_PORT=${{ secrets.WEBHOOK_PORT }}" >> .env
          echo "PLAID_CLIENT_NAME=${{ secrets.PLAID_CLIENT_NAME }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET }}" >> .env
          echo "PLAID_PRODUCTS=${{ secrets.PLAID_PRODUCTS }}" >> .env
          echo "PLAID_COUNTRY_CODES=${{ secrets.PLAID_COUNTRY_CODES }}" >> .env
          echo "PLAID_WEBHOOK_URL=${{ secrets.PLAID_WEBHOOK_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}" >> .env
          echo "AUTH0_SECRET=${{ secrets.AUTH0_SECRET }}" >> .env
          echo "AUTH0_ISSUER_BASE_URL=${{ secrets.AUTH0_ISSUER_BASE_URL }}" >> .env

      - name: Build backend image
        if: env.BACKEND_CHANGED == 'true'
        run: docker build -t $BACKEND_IMAGE_NAME -f backend/Dockerfile .

      - name: Push backend image to GitHub Container Registry
        if: env.BACKEND_CHANGED == 'true'
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BACKEND_IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $BACKEND_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      # Deploy to VM
      - name: Copy and rename Docker Compose file to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.prod.yml"
          target: "eccountant/docker-compose.yml"

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd eccountant
            sudo docker-compose pull
            sudo docker-compose up -d
            # Run Prisma migrations
            sudo docker-compose exec backend npx prisma migrate deploy
