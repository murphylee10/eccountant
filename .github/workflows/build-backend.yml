name: Publish Express Skeleton to GHCR

on:
  push:
    # Only run this workflow if it is a commit to main.
    branches:
      - main
    # Only run this workflow if the commit has modified files from backend
    paths:
      - backend/**

env:
  IMAGE_NAME: eccountant-backend

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  deploy-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "WEBHOOK_PORT=${{ secrets.WEBHOOK_PORT }}" >> .env
          echo "PLAID_CLIENT_NAME=${{ secrets.PLAID_CLIENT_NAME }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET }}" >> .env
          echo "PLAID_PRODUCTS=${{ secrets.PLAID_PRODUCTS }}" >> .env
          echo "PLAID_COUNTRY_CODES=${{ secrets.PLAID_COUNTRY_CODES }}" >> .env
          echo "PLAID_WEBHOOK_URL=${{ secrets.PLAID_WEBHOOK_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}" >> .env
          echo "AUTH0_SECRET=${{ secrets.AUTH0_SECRET }}" >> .env
          echo "AUTH0_ISSUER_BASE_URL=${{ secrets.AUTH0_ISSUER_BASE_URL }}" >> .env

      - name: Build image
        run: |
          cd ..
          docker build -t $IMAGE_NAME -f backend/Dockerfile .

      - name: Log into GitHub Container Registry
        # TODO: Create a Personal Access Tokens (PAT) with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
    environment: backend
